// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   	ViewModel.tt
// Version:		2.0
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls = WPAppStudio.Controls;
using Entities = WPAppStudio.Entities;
using EntitiesBase = WPAppStudio.Entities.Base;
using IServices = WPAppStudio.Services.Interfaces;
using IViewModels = WPAppStudio.ViewModel.Interfaces;
using Localization = WPAppStudio.Localization;
using Repositories = WPAppStudio.Repositories;
using Services = WPAppStudio.Services;
using ViewModelsBase = WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of newondvd_News ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class newondvd_NewsViewModel : ViewModelsBase.VMBase, IViewModels.Inewondvd_NewsViewModel
    {       

		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly Repositories.Inewondvd_dvdDataSource _newondvd_dvdDataSource;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="newondvd_NewsViewModel" /> class.
        /// </summary>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="newondvd_dvdDataSource">The Newondvd_dvd Data Source.</param>
        public newondvd_NewsViewModel(IServices.IDialogService dialogService, IServices.INavigationService navigationService, Repositories.Inewondvd_dvdDataSource newondvd_dvdDataSource)
        {
			_dialogService = dialogService;
			_navigationService = navigationService;
			_newondvd_dvdDataSource = newondvd_dvdDataSource;
        }
		
	
		private ObservableCollection<EntitiesBase.RssSearchResult> _newondvd_NewsListControlCollection;

        /// <summary>
        /// Newondvd_NewsListControlCollection property.
        /// </summary>		
        public ObservableCollection<EntitiesBase.RssSearchResult> Newondvd_NewsListControlCollection
        {
            get
            {
				
                if(_newondvd_NewsListControlCollection == null)
					Getnewondvd_NewsListControlCollectionData();
				return _newondvd_NewsListControlCollection;     
            }
            set
            {
                SetProperty(ref _newondvd_NewsListControlCollection, value);
            }
        }
	
		private EntitiesBase.RssSearchResult _selectednewondvd_NewsListControlCollection;

        /// <summary>
        /// Selectednewondvd_NewsListControlCollection property.
        /// </summary>		
        public EntitiesBase.RssSearchResult Selectednewondvd_NewsListControlCollection
        {
            get
            {
				return _selectednewondvd_NewsListControlCollection;
            }
            set
            {
                _selectednewondvd_NewsListControlCollection = value;
                if (value != null)
                    _navigationService.NavigateTo<IViewModels.Inewondvd_DetailViewModel>(_selectednewondvd_NewsListControlCollection);
            }
        }
	    /// <summary>
        /// IsInternetAvailable property.
        /// </summary>		
        public override Visibility IsInternetAvailable
        {
	      get
          {
				return Visibility.Collapsed; 
           }
		}

        /// <summary>
        /// Delegate method for the Refreshnewondvd_NewsListControlCollectionCommand command.
        /// </summary>
        public async void Refreshnewondvd_NewsListControlCollectionCommandDelegate() 
        {
			try
			{
				LoadingNewondvd_NewsListControlCollection = true;
				var items = await  _newondvd_dvdDataSource.Refresh();
				Newondvd_NewsListControlCollection = items;
			}
            catch (Exception ex)
            {
				Newondvd_NewsListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.rssError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingNewondvd_NewsListControlCollection = false;
			}
        }
		
		
        private bool _loadingNewondvd_NewsListControlCollection;
		
        public bool LoadingNewondvd_NewsListControlCollection
        {
            get { return _loadingNewondvd_NewsListControlCollection; }
            set { SetProperty(ref _loadingNewondvd_NewsListControlCollection, value); }
        }

        private ICommand _refreshnewondvd_NewsListControlCollectionCommand;

        /// <summary>
        /// Gets the Refreshnewondvd_NewsListControlCollectionCommand command.
        /// </summary>
        public ICommand Refreshnewondvd_NewsListControlCollectionCommand
        {
            get { return _refreshnewondvd_NewsListControlCollectionCommand = _refreshnewondvd_NewsListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand(Refreshnewondvd_NewsListControlCollectionCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the Getnewondvd_NewsListControlCollectionCommand command.
        /// </summary>
        public  void Getnewondvd_NewsListControlCollectionCommandDelegate(int pageNumber= 0) 
        {
				Getnewondvd_NewsListControlCollectionData(pageNumber);
        }
		

        private ICommand _getnewondvd_NewsListControlCollectionCommand;

        /// <summary>
        /// Gets the Getnewondvd_NewsListControlCollectionCommand command.
        /// </summary>
        public ICommand Getnewondvd_NewsListControlCollectionCommand
        {
            get { return _getnewondvd_NewsListControlCollectionCommand = _getnewondvd_NewsListControlCollectionCommand ?? new ViewModelsBase.DelegateCommand<int>(Getnewondvd_NewsListControlCollectionCommandDelegate); }
        }

        private async void Getnewondvd_NewsListControlCollectionData(int pageNumber = 0)
        {
	
			try
			{
				LoadingNewondvd_NewsListControlCollection = true;
			
				var items = await _newondvd_dvdDataSource.GetData();
                Newondvd_NewsListControlCollection = items;
			}
            catch (Exception ex)
            {
				Newondvd_NewsListControlCollection = null;
		
                Debug.WriteLine(ex.ToString());
                _dialogService.Show(Localization.AppResources.rssError + Environment.NewLine + Localization.AppResources.TryAgain);
            }
            finally
            {
				LoadingNewondvd_NewsListControlCollection = false;
			}
		}
    }
}
